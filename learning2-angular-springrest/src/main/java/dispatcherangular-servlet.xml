<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop = "http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.1.xsd
                    http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd     
                    http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
                    http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd 
                    http://www.springframework.org/schema/aop 
   					http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">


	<mvc:annotation-driven>
		<mvc:message-converters>
			<bean
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="objectMapper">
					<bean class="com.learning100.config.HibernateAwareObjectMapper" />
				</property>
			</bean>
		</mvc:message-converters>

	</mvc:annotation-driven>

	<mvc:default-servlet-handler />
	<context:component-scan base-package="com.learning100" />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<mvc:resources mapping="/resources/**" location="/resources/" />

	<context:component-scan base-package="com.userregistrationspringmvc" />

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">

		<property name="driverClassName" value="org.postgresql.Driver" />

		<property name="url"
			value="jdbc:postgresql://localhost:5432/userregisteration" />

		<property name="username" value="postgres" />
		<property name="password" value="postgres" />

	</bean>

	<!-- Hibernate 4 SessionFactory Bean definition -->
	<bean id="hibernate4AnnotatedSessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="annotatedClasses">
			<list>
				<value>com.learning100.model.Country</value>
				<value>com.learning100.model.Region</value>
				<value>com.learning100.model.Role</value>
				<value>com.learning100.model.User</value>
				<value>com.learning100.model.BankAccount</value>
				<value>com.learning100.model.TransactionHistory</value>

			</list>
		</property>
		<property name="hibernateProperties">
			<props>
				<prop key="hibernate.dialect">org.hibernate.dialect.PostgreSQLDialect
				</prop>
				<prop key="hibernate.show_sql">false</prop>
			</props>
		</property>
	</bean>

	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<property name="sessionFactory" ref="hibernate4AnnotatedSessionFactory" />
	</bean>

	<tx:annotation-driven transaction-manager="transactionManager" />

	<bean id="sessionDataBean" class="com.learning100.util.SessionData">
	</bean>

	<!-- Spring transaction configuration -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>			
			<!-- <tx:method name="get*" read-only="true" />	 -->	
			<tx:method name="*" propagation="REQUIRED" isolation="READ_COMMITTED" read-only="false" rollback-for="Throwable"/>
		</tx:attributes>
	</tx:advice>
	
	<aop:config>
		<aop:pointcut id="allServiceMethods" expression="execution(* com.learning100.service.*.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="allServiceMethods" />
	</aop:config>	

</beans>